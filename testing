#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor leftMotorA = motor(PORT1, ratio6_1, false);

motor rightMotorA = motor(PORT2, ratio6_1, true);

motor leftMotorB = motor(PORT3, ratio6_1, false);

motor rightMotorB = motor(PORT4, ratio6_1, true);

digital_out Solenoid = digital_out(Brain.ThreeWirePort.H);
motor IntakeMotor = motor(PORT5, ratio6_1, false);

controller Controller1 = controller(primary);


// generating and setting random seed
void initializeRandomSeed(){
  int systemTime = Brain.Timer.systemHighResolution();
  double batteryCurrent = Brain.Battery.current();
  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);

  // Combine these values into a single integer
  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;

  // Set the seed
  srand(seed);
}



void vexcodeInit() {

  //Initializing random seed.
  initializeRandomSeed(); 
}


// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;

#pragma endregion VEXcode Generated Robot Configuration

// ----------------------------------------------------------------------------
//                                                                            
//    Project:                                               
//    Author:
//    Created:
//    Configuration:        
//                                                                            
// ----------------------------------------------------------------------------

// Include the V5 Library
#include "vex.h"

// Allows for easier use of the VEX Library
using namespace vex;

int accelerationValueRight;
int accelerationValueLeft;
int intakeValue;
int arcadeTurnValue;
bool pistonActive = false;
bool tankToggle = true;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \


#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.

// generating and setting random seed
  int systemTime = Brain.Timer.systemHighResolution();
  double batteryCurrent = Brain.Battery.current();
  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);

  // Combine these values into a single integer




void ButtonPressL1()
{
Solenoid.set(false);
}
void ButtonPressR1()
{
Solenoid.set(true);
}
void ButtonPressA()
{
  intakeValue = 0;
  IntakeMotor.stop();
}
void ButtonPressY()
{
  tankToggle = !tankToggle;
}



// Begin project code

void preAutonomous(void) {
  // actions to do when the program starts
  Brain.Screen.clearScreen();
  Brain.Screen.print("pre auton code");
  wait(1, seconds);
}

void autonomous(void) {
  Brain.Screen.clearScreen();
  Brain.Screen.print("autonomous code");
  // place automonous code here
  leftMotorA.setMaxTorque(100,percent);
  leftMotorB.setMaxTorque(100,percent);
  rightMotorA.setMaxTorque(100,percent);
  rightMotorB.setMaxTorque(100,percent);
  leftMotorA.spin(forward);
  leftMotorB.spin(forward);
  rightMotorA.spin(forward);
  rightMotorB.spin(forward);
  wait(3000,msec);
  leftMotorA.stop();
  leftMotorB.stop();
  rightMotorA.stop();
  rightMotorB.stop();
}

void userControl(void) {
  Brain.Screen.clearScreen();
  // place driver control in this while loop
  while (true) {
    wait(20, msec);
    Brain.Screen.clearScreen();
    Brain.Screen.print("%d", intakeValue);

    accelerationValueRight = Controller1.Axis2.position();
    accelerationValueLeft = Controller1.Axis3.position();
    arcadeTurnValue = Controller1.Axis1.position();

    if(accelerationValueRight == 0 && accelerationValueLeft == 0)
    {
      leftMotorA.stop();
      leftMotorB.stop();
      rightMotorA.stop();
      rightMotorB.stop();
    }
    if(tankToggle)
    {
      leftMotorA.setVelocity(accelerationValueLeft,percent);
      leftMotorB.setVelocity(accelerationValueLeft,percent);

      rightMotorA.setVelocity(accelerationValueRight,percent);
      rightMotorB.setVelocity(accelerationValueRight,percent);

      leftMotorA.spin(forward);
      leftMotorB.spin(forward);

      rightMotorA.spin(forward);
      rightMotorB.spin(forward);
    }
    if(tankToggle == false && arcadeTurnValue == 0)
    {
      leftMotorA.setVelocity(accelerationValueLeft,percent);
      leftMotorB.setVelocity(accelerationValueLeft,percent);

      rightMotorA.setVelocity(accelerationValueLeft,percent);
      rightMotorB.setVelocity(accelerationValueLeft,percent);

      leftMotorA.spin(forward);
      leftMotorB.spin(forward);

      rightMotorA.spin(forward);
      rightMotorB.spin(forward);
    }
    
    if(arcadeTurnValue != 0)
    {
      leftMotorA.setVelocity(arcadeTurnValue,percent);
      leftMotorB.setVelocity(arcadeTurnValue,percent);

      rightMotorA.setVelocity(arcadeTurnValue,percent);
      rightMotorB.setVelocity(arcadeTurnValue,percent);

      if(arcadeTurnValue > 0)
      {
            //right turn
          rightMotorA.spin(forward);
          rightMotorB.spin(forward);

          leftMotorA.spin(reverse);
          leftMotorB.spin(reverse);
      }

      if(arcadeTurnValue < 0)
      {
          //left turn
          leftMotorA.spin(forward);
          leftMotorB.spin(forward);

          rightMotorA.spin(reverse);
          rightMotorB.spin(reverse);
      }
    }

    if(Controller1.ButtonUp.pressing())
    {
      if(intakeValue <= 55)
      {
        intakeValue = intakeValue + 5;
      }
      IntakeMotor.spin(forward);
    }

    if(Controller1.ButtonDown.pressing())
    {
      if(intakeValue >= -55)
      {
        intakeValue = intakeValue - 5;
      }

      IntakeMotor.spin(forward);
    }

    IntakeMotor.setVelocity(intakeValue,percent);
    

    Controller1.ButtonA.pressed(ButtonPressA);
    Controller1.ButtonL1.pressed(ButtonPressL1);
    Controller1.ButtonR1.pressed(ButtonPressR1);
    
    Controller1.ButtonY.pressed(ButtonPressY);

  
}

  }
int main() {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();
  // create competition instance
  competition Competition;

  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(userControl);

  // Run the pre-autonomous function.
  preAutonomous();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
