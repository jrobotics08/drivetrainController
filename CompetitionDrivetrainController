#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
controller Controller1 = controller(primary);
motor leftMotorA = motor(PORT1, ratio18_1, false);
motor leftMotorB = motor(PORT3, ratio18_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT2, ratio18_1, true);
motor rightMotorB = motor(PORT4, ratio18_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);



// generating and setting random seed
void initializeRandomSeed(){
  int systemTime = Brain.Timer.systemHighResolution();
  double batteryCurrent = Brain.Battery.current();
  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);

  // Combine these values into a single integer
  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;

  // Set the seed
  srand(seed);
}



void vexcodeInit() {

  //Initializing random seed.
  initializeRandomSeed(); 
}


// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;

#pragma endregion VEXcode Generated Robot Configuration


/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       drivetrainController.cpp                                                  */
/*    Author:       Joey Riley(Berm robotics B team)                                                  */
/*    Created:      a while ago                                                  */
/*    Description:  Mecanum drivetrain controller for our competition bot                                               */
/*                                                                            */
/*----------------------------------------------------------------------------*/


// Include the V5 Library
#include "vex.h"
 // Allows for easier use of the VEX Library
using namespace vex;

enum class DRIVETRAIN_STATE
   {
    ARCADE = 0,
    TANK,
    SPECIALIZED
   };


class Dtrain
{
 //maybe in future add a button cycled variable that changes the drivetrain type
 //ex: one is arcade, two is tank, three is custom, etc
  public:
   int accelerationValueLeft;
   int accelerationValueRight;
   int turnValue;
   int maxTorque;
   int toggleControl = 0;
   bool deadzoneMode = false;
   enum DRIVETRAIN_STATE drivetrainState = DRIVETRAIN_STATE::ARCADE;



 public:
   void Stop()
   {
     leftMotorA.stop();
     leftMotorB.stop();


     rightMotorA.stop();
     rightMotorB.stop();
   }

   void ToggleMode()
   {
      toggleControl ++;
      drivetrainState = toggleControl;
      
      if(toggleControl > 2 || toggleControl < 0)
      {
        toggleControl = 0;
      }
   }

   void ToggleIntake()
   {
     //toggles intake 
   }

   void ToggleAuto(int pos)
   {
     double pos1 = 0;
     double pos2 = 46.64;
     double pos3;
   }
    void Drive()
   {
      if(Controller1.ButtonL2.pressing())
      {
        leftMotorA.setVelocity(accelerationValueLeft,percent);
        leftMotorB.setVelocity(accelerationValueLeft,percent);

        rightMotorA.setVelocity(accelerationValueRight,percent);
        rightMotorB.setVelocity(accelerationValueRight,percent);
      }
      //^Tank controls

    //Start Deadzone mode
    if(deadzoneMode)
    {
     if(Controller1.ButtonL1.pressing())
     {
       leftMotorA.setVelocity(accelerationValueLeft,percent);
       rightMotorA.setVelocity(accelerationValueLeft,percent);


       leftMotorB.setVelocity(accelerationValueLeft,percent);
       rightMotorB.setVelocity(accelerationValueLeft,percent);




       if(accelerationValueLeft >= 1)
       {
         accelerationValueLeft = accelerationValueLeft + 50;
         //started working on deadzone controller 
         //if positive add 50 if negative -50 for deadzone controller, thats all
       }
     }
    }
     //same thing as else statement below but with a deadzone for faster neutral movement
     //End deadzone mode


     else
    {
       leftMotorA.setVelocity(accelerationValueLeft,percent);
       rightMotorA.setVelocity(accelerationValueLeft,percent);


       leftMotorB.setVelocity(accelerationValueLeft,percent);
       rightMotorB.setVelocity(accelerationValueLeft,percent);
       //set drivetrain motor velocity to the position of axis 3
       //full variable speed, good for precision

    //this is interfering with tank
      
     }


     leftMotorA.spin(forward);
     leftMotorB.spin(forward);




    rightMotorA.spin(forward);
    rightMotorB.spin(forward);
       //drive drivetrain motors
      
      
   }


   void Turn()
   {
     if(turnValue >= 1)
     {


       if(Controller1.ButtonR1.pressing())
       {
         rightMotorA.setVelocity(turnValue,percent);
         rightMotorB.setVelocity(turnValue,percent);


         leftMotorA.setVelocity(turnValue,percent);
         leftMotorB.setVelocity(turnValue,percent);


         rightMotorA.spin(forward);
         rightMotorB.spin(forward);


         leftMotorA.spin(reverse);
         leftMotorB.spin(reverse);
       }
       else
       {
       //right turn
       rightMotorA.setVelocity(turnValue,percent);
       rightMotorB.setVelocity(turnValue,percent);


       rightMotorA.spin(forward);
       rightMotorB.spin(forward);
       }


     }


     if(turnValue <= -1)
     {


       if(Controller1.ButtonR1.pressing())
       {
         leftMotorA.setVelocity(turnValue,percent);
         leftMotorB.setVelocity(turnValue,percent);


         rightMotorA.setVelocity(turnValue,percent);
         rightMotorB.setVelocity(turnValue,percent);


         leftMotorA.spin(forward);
         leftMotorB.spin(forward);


         rightMotorA.spin(reverse);
         rightMotorB.spin(reverse);
       }
      else
      {
       //left turn
       leftMotorA.setVelocity(turnValue,percent);
       leftMotorB.setVelocity(turnValue,percent);


       leftMotorA.spin(forward);
       leftMotorB.spin(forward);
      }


     }
   }




   Dtrain(int maxTorqueCon)
   {
     maxTorque = maxTorqueCon;


     leftMotorA.setMaxTorque(maxTorque,percent);
     leftMotorB.setMaxTorque(maxTorque,percent);
    
     rightMotorA.setMaxTorque(maxTorque,percent);
     rightMotorB.setMaxTorque(maxTorque,percent);
   }

   
   //Dtrain constructor initializes stuff for the drivetrain
};


int main() {
 // Initializing Robot Configuration. DO NOT REMOVE!
 vexcodeInit();
 // Begin project code


 Dtrain dtrain(100);
 RemoteControlCodeEnabled = false;


 while(true)
 {
   dtrain.accelerationValueLeft = Controller1.Axis3.position();
   dtrain.accelerationValueRight = Controller1.Axis2.position();
   dtrain.turnValue = Controller1.Axis1.position();
   //assigns controller axis to dtrain values
  


   if(dtrain.accelerationValueLeft != 0 || dtrain.accelerationValueRight != 0)
 {
  dtrain.Drive();
 }
 //if controller axis 3 isnt centered then drive


 if(dtrain.turnValue != 0)
 {
   dtrain.Turn();
 }
 //if controller 4 axis isnt centered then rotate


 // else
 // {
 //   dtrain.Stop();
 // }


 if(dtrain.turnValue == 0 && dtrain.accelerationValueLeft == 0 && dtrain.accelerationValueRight == 0)
 {
   dtrain.Stop();
 }

 if(Controller1.ButtonR2.pressing())
 {
   dtrain.ToggleIntake();
 }

 Controller1.ButtonA.pressed(ToggleMode);
 //Allows driver to cycle between Drivetrain control types

 Brain.Screen.print(" Right %d", dtrain.accelerationValueRight);
 Brain.Screen.newLine();
 Brain.Screen.print(" Left %d", dtrain.accelerationValueLeft);
   wait(20,msec);
  //small delay
}










}
